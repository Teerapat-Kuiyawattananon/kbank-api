// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapi/ent/bill"
	"kapi/ent/billdetail"
	"kapi/ent/customer"
	"kapi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillDetailUpdate is the builder for updating BillDetail entities.
type BillDetailUpdate struct {
	config
	hooks    []Hook
	mutation *BillDetailMutation
}

// Where appends a list predicates to the BillDetailUpdate builder.
func (bdu *BillDetailUpdate) Where(ps ...predicate.BillDetail) *BillDetailUpdate {
	bdu.mutation.Where(ps...)
	return bdu
}

// SetChannelCode sets the "channel_code" field.
func (bdu *BillDetailUpdate) SetChannelCode(s string) *BillDetailUpdate {
	bdu.mutation.SetChannelCode(s)
	return bdu
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (bdu *BillDetailUpdate) SetNillableChannelCode(s *string) *BillDetailUpdate {
	if s != nil {
		bdu.SetChannelCode(*s)
	}
	return bdu
}

// SetSenderBankCode sets the "sender_bank_code" field.
func (bdu *BillDetailUpdate) SetSenderBankCode(s string) *BillDetailUpdate {
	bdu.mutation.SetSenderBankCode(s)
	return bdu
}

// SetNillableSenderBankCode sets the "sender_bank_code" field if the given value is not nil.
func (bdu *BillDetailUpdate) SetNillableSenderBankCode(s *string) *BillDetailUpdate {
	if s != nil {
		bdu.SetSenderBankCode(*s)
	}
	return bdu
}

// SetStatus sets the "status" field.
func (bdu *BillDetailUpdate) SetStatus(s string) *BillDetailUpdate {
	bdu.mutation.SetStatus(s)
	return bdu
}

// SetCustomerID sets the "customer_id" field.
func (bdu *BillDetailUpdate) SetCustomerID(i int) *BillDetailUpdate {
	bdu.mutation.SetCustomerID(i)
	return bdu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (bdu *BillDetailUpdate) SetNillableCustomerID(i *int) *BillDetailUpdate {
	if i != nil {
		bdu.SetCustomerID(*i)
	}
	return bdu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (bdu *BillDetailUpdate) ClearCustomerID() *BillDetailUpdate {
	bdu.mutation.ClearCustomerID()
	return bdu
}

// SetTranAmount sets the "tran_amount" field.
func (bdu *BillDetailUpdate) SetTranAmount(f float64) *BillDetailUpdate {
	bdu.mutation.ResetTranAmount()
	bdu.mutation.SetTranAmount(f)
	return bdu
}

// SetNillableTranAmount sets the "tran_amount" field if the given value is not nil.
func (bdu *BillDetailUpdate) SetNillableTranAmount(f *float64) *BillDetailUpdate {
	if f != nil {
		bdu.SetTranAmount(*f)
	}
	return bdu
}

// AddTranAmount adds f to the "tran_amount" field.
func (bdu *BillDetailUpdate) AddTranAmount(f float64) *BillDetailUpdate {
	bdu.mutation.AddTranAmount(f)
	return bdu
}

// SetCreatedAt sets the "created_at" field.
func (bdu *BillDetailUpdate) SetCreatedAt(t time.Time) *BillDetailUpdate {
	bdu.mutation.SetCreatedAt(t)
	return bdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bdu *BillDetailUpdate) SetNillableCreatedAt(t *time.Time) *BillDetailUpdate {
	if t != nil {
		bdu.SetCreatedAt(*t)
	}
	return bdu
}

// SetUpdatedAt sets the "updated_at" field.
func (bdu *BillDetailUpdate) SetUpdatedAt(t time.Time) *BillDetailUpdate {
	bdu.mutation.SetUpdatedAt(t)
	return bdu
}

// SetBillsID sets the "bills" edge to the Bill entity by ID.
func (bdu *BillDetailUpdate) SetBillsID(id int) *BillDetailUpdate {
	bdu.mutation.SetBillsID(id)
	return bdu
}

// SetNillableBillsID sets the "bills" edge to the Bill entity by ID if the given value is not nil.
func (bdu *BillDetailUpdate) SetNillableBillsID(id *int) *BillDetailUpdate {
	if id != nil {
		bdu = bdu.SetBillsID(*id)
	}
	return bdu
}

// SetBills sets the "bills" edge to the Bill entity.
func (bdu *BillDetailUpdate) SetBills(b *Bill) *BillDetailUpdate {
	return bdu.SetBillsID(b.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bdu *BillDetailUpdate) SetCustomer(c *Customer) *BillDetailUpdate {
	return bdu.SetCustomerID(c.ID)
}

// Mutation returns the BillDetailMutation object of the builder.
func (bdu *BillDetailUpdate) Mutation() *BillDetailMutation {
	return bdu.mutation
}

// ClearBills clears the "bills" edge to the Bill entity.
func (bdu *BillDetailUpdate) ClearBills() *BillDetailUpdate {
	bdu.mutation.ClearBills()
	return bdu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bdu *BillDetailUpdate) ClearCustomer() *BillDetailUpdate {
	bdu.mutation.ClearCustomer()
	return bdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bdu *BillDetailUpdate) Save(ctx context.Context) (int, error) {
	bdu.defaults()
	return withHooks(ctx, bdu.sqlSave, bdu.mutation, bdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bdu *BillDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := bdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bdu *BillDetailUpdate) Exec(ctx context.Context) error {
	_, err := bdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bdu *BillDetailUpdate) ExecX(ctx context.Context) {
	if err := bdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bdu *BillDetailUpdate) defaults() {
	if _, ok := bdu.mutation.UpdatedAt(); !ok {
		v := billdetail.UpdateDefaultUpdatedAt()
		bdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bdu *BillDetailUpdate) check() error {
	if v, ok := bdu.mutation.Status(); ok {
		if err := billdetail.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BillDetail.status": %w`, err)}
		}
	}
	return nil
}

func (bdu *BillDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billdetail.Table, billdetail.Columns, sqlgraph.NewFieldSpec(billdetail.FieldID, field.TypeInt))
	if ps := bdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bdu.mutation.ChannelCode(); ok {
		_spec.SetField(billdetail.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := bdu.mutation.SenderBankCode(); ok {
		_spec.SetField(billdetail.FieldSenderBankCode, field.TypeString, value)
	}
	if value, ok := bdu.mutation.Status(); ok {
		_spec.SetField(billdetail.FieldStatus, field.TypeString, value)
	}
	if value, ok := bdu.mutation.TranAmount(); ok {
		_spec.SetField(billdetail.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := bdu.mutation.AddedTranAmount(); ok {
		_spec.AddField(billdetail.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := bdu.mutation.CreatedAt(); ok {
		_spec.SetField(billdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bdu.mutation.UpdatedAt(); ok {
		_spec.SetField(billdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if bdu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billdetail.BillsTable,
			Columns: []string{billdetail.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bdu.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billdetail.BillsTable,
			Columns: []string{billdetail.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bdu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billdetail.CustomerTable,
			Columns: []string{billdetail.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bdu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billdetail.CustomerTable,
			Columns: []string{billdetail.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bdu.mutation.done = true
	return n, nil
}

// BillDetailUpdateOne is the builder for updating a single BillDetail entity.
type BillDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillDetailMutation
}

// SetChannelCode sets the "channel_code" field.
func (bduo *BillDetailUpdateOne) SetChannelCode(s string) *BillDetailUpdateOne {
	bduo.mutation.SetChannelCode(s)
	return bduo
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (bduo *BillDetailUpdateOne) SetNillableChannelCode(s *string) *BillDetailUpdateOne {
	if s != nil {
		bduo.SetChannelCode(*s)
	}
	return bduo
}

// SetSenderBankCode sets the "sender_bank_code" field.
func (bduo *BillDetailUpdateOne) SetSenderBankCode(s string) *BillDetailUpdateOne {
	bduo.mutation.SetSenderBankCode(s)
	return bduo
}

// SetNillableSenderBankCode sets the "sender_bank_code" field if the given value is not nil.
func (bduo *BillDetailUpdateOne) SetNillableSenderBankCode(s *string) *BillDetailUpdateOne {
	if s != nil {
		bduo.SetSenderBankCode(*s)
	}
	return bduo
}

// SetStatus sets the "status" field.
func (bduo *BillDetailUpdateOne) SetStatus(s string) *BillDetailUpdateOne {
	bduo.mutation.SetStatus(s)
	return bduo
}

// SetCustomerID sets the "customer_id" field.
func (bduo *BillDetailUpdateOne) SetCustomerID(i int) *BillDetailUpdateOne {
	bduo.mutation.SetCustomerID(i)
	return bduo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (bduo *BillDetailUpdateOne) SetNillableCustomerID(i *int) *BillDetailUpdateOne {
	if i != nil {
		bduo.SetCustomerID(*i)
	}
	return bduo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (bduo *BillDetailUpdateOne) ClearCustomerID() *BillDetailUpdateOne {
	bduo.mutation.ClearCustomerID()
	return bduo
}

// SetTranAmount sets the "tran_amount" field.
func (bduo *BillDetailUpdateOne) SetTranAmount(f float64) *BillDetailUpdateOne {
	bduo.mutation.ResetTranAmount()
	bduo.mutation.SetTranAmount(f)
	return bduo
}

// SetNillableTranAmount sets the "tran_amount" field if the given value is not nil.
func (bduo *BillDetailUpdateOne) SetNillableTranAmount(f *float64) *BillDetailUpdateOne {
	if f != nil {
		bduo.SetTranAmount(*f)
	}
	return bduo
}

// AddTranAmount adds f to the "tran_amount" field.
func (bduo *BillDetailUpdateOne) AddTranAmount(f float64) *BillDetailUpdateOne {
	bduo.mutation.AddTranAmount(f)
	return bduo
}

// SetCreatedAt sets the "created_at" field.
func (bduo *BillDetailUpdateOne) SetCreatedAt(t time.Time) *BillDetailUpdateOne {
	bduo.mutation.SetCreatedAt(t)
	return bduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bduo *BillDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *BillDetailUpdateOne {
	if t != nil {
		bduo.SetCreatedAt(*t)
	}
	return bduo
}

// SetUpdatedAt sets the "updated_at" field.
func (bduo *BillDetailUpdateOne) SetUpdatedAt(t time.Time) *BillDetailUpdateOne {
	bduo.mutation.SetUpdatedAt(t)
	return bduo
}

// SetBillsID sets the "bills" edge to the Bill entity by ID.
func (bduo *BillDetailUpdateOne) SetBillsID(id int) *BillDetailUpdateOne {
	bduo.mutation.SetBillsID(id)
	return bduo
}

// SetNillableBillsID sets the "bills" edge to the Bill entity by ID if the given value is not nil.
func (bduo *BillDetailUpdateOne) SetNillableBillsID(id *int) *BillDetailUpdateOne {
	if id != nil {
		bduo = bduo.SetBillsID(*id)
	}
	return bduo
}

// SetBills sets the "bills" edge to the Bill entity.
func (bduo *BillDetailUpdateOne) SetBills(b *Bill) *BillDetailUpdateOne {
	return bduo.SetBillsID(b.ID)
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bduo *BillDetailUpdateOne) SetCustomer(c *Customer) *BillDetailUpdateOne {
	return bduo.SetCustomerID(c.ID)
}

// Mutation returns the BillDetailMutation object of the builder.
func (bduo *BillDetailUpdateOne) Mutation() *BillDetailMutation {
	return bduo.mutation
}

// ClearBills clears the "bills" edge to the Bill entity.
func (bduo *BillDetailUpdateOne) ClearBills() *BillDetailUpdateOne {
	bduo.mutation.ClearBills()
	return bduo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bduo *BillDetailUpdateOne) ClearCustomer() *BillDetailUpdateOne {
	bduo.mutation.ClearCustomer()
	return bduo
}

// Where appends a list predicates to the BillDetailUpdate builder.
func (bduo *BillDetailUpdateOne) Where(ps ...predicate.BillDetail) *BillDetailUpdateOne {
	bduo.mutation.Where(ps...)
	return bduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bduo *BillDetailUpdateOne) Select(field string, fields ...string) *BillDetailUpdateOne {
	bduo.fields = append([]string{field}, fields...)
	return bduo
}

// Save executes the query and returns the updated BillDetail entity.
func (bduo *BillDetailUpdateOne) Save(ctx context.Context) (*BillDetail, error) {
	bduo.defaults()
	return withHooks(ctx, bduo.sqlSave, bduo.mutation, bduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bduo *BillDetailUpdateOne) SaveX(ctx context.Context) *BillDetail {
	node, err := bduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bduo *BillDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := bduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bduo *BillDetailUpdateOne) ExecX(ctx context.Context) {
	if err := bduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bduo *BillDetailUpdateOne) defaults() {
	if _, ok := bduo.mutation.UpdatedAt(); !ok {
		v := billdetail.UpdateDefaultUpdatedAt()
		bduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bduo *BillDetailUpdateOne) check() error {
	if v, ok := bduo.mutation.Status(); ok {
		if err := billdetail.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BillDetail.status": %w`, err)}
		}
	}
	return nil
}

func (bduo *BillDetailUpdateOne) sqlSave(ctx context.Context) (_node *BillDetail, err error) {
	if err := bduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billdetail.Table, billdetail.Columns, sqlgraph.NewFieldSpec(billdetail.FieldID, field.TypeInt))
	id, ok := bduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BillDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billdetail.FieldID)
		for _, f := range fields {
			if !billdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != billdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bduo.mutation.ChannelCode(); ok {
		_spec.SetField(billdetail.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := bduo.mutation.SenderBankCode(); ok {
		_spec.SetField(billdetail.FieldSenderBankCode, field.TypeString, value)
	}
	if value, ok := bduo.mutation.Status(); ok {
		_spec.SetField(billdetail.FieldStatus, field.TypeString, value)
	}
	if value, ok := bduo.mutation.TranAmount(); ok {
		_spec.SetField(billdetail.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := bduo.mutation.AddedTranAmount(); ok {
		_spec.AddField(billdetail.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := bduo.mutation.CreatedAt(); ok {
		_spec.SetField(billdetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bduo.mutation.UpdatedAt(); ok {
		_spec.SetField(billdetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if bduo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billdetail.BillsTable,
			Columns: []string{billdetail.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bduo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   billdetail.BillsTable,
			Columns: []string{billdetail.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bduo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billdetail.CustomerTable,
			Columns: []string{billdetail.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bduo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   billdetail.CustomerTable,
			Columns: []string{billdetail.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BillDetail{config: bduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bduo.mutation.done = true
	return _node, nil
}
