// Code generated by ent, DO NOT EDIT.

package customer

import (
	"kapi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldLastName, v))
}

// TitleName applies equality check predicate on the "title_name" field. It's identical to TitleNameEQ.
func TitleName(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTitleName, v))
}

// MobileNumber applies equality check predicate on the "mobile_number" field. It's identical to MobileNumberEQ.
func MobileNumber(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldMobileNumber, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldLastName, v))
}

// TitleNameEQ applies the EQ predicate on the "title_name" field.
func TitleNameEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldTitleName, v))
}

// TitleNameNEQ applies the NEQ predicate on the "title_name" field.
func TitleNameNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldTitleName, v))
}

// TitleNameIn applies the In predicate on the "title_name" field.
func TitleNameIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldTitleName, vs...))
}

// TitleNameNotIn applies the NotIn predicate on the "title_name" field.
func TitleNameNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldTitleName, vs...))
}

// TitleNameGT applies the GT predicate on the "title_name" field.
func TitleNameGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldTitleName, v))
}

// TitleNameGTE applies the GTE predicate on the "title_name" field.
func TitleNameGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldTitleName, v))
}

// TitleNameLT applies the LT predicate on the "title_name" field.
func TitleNameLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldTitleName, v))
}

// TitleNameLTE applies the LTE predicate on the "title_name" field.
func TitleNameLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldTitleName, v))
}

// TitleNameContains applies the Contains predicate on the "title_name" field.
func TitleNameContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldTitleName, v))
}

// TitleNameHasPrefix applies the HasPrefix predicate on the "title_name" field.
func TitleNameHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldTitleName, v))
}

// TitleNameHasSuffix applies the HasSuffix predicate on the "title_name" field.
func TitleNameHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldTitleName, v))
}

// TitleNameEqualFold applies the EqualFold predicate on the "title_name" field.
func TitleNameEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldTitleName, v))
}

// TitleNameContainsFold applies the ContainsFold predicate on the "title_name" field.
func TitleNameContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldTitleName, v))
}

// MobileNumberEQ applies the EQ predicate on the "mobile_number" field.
func MobileNumberEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldMobileNumber, v))
}

// MobileNumberNEQ applies the NEQ predicate on the "mobile_number" field.
func MobileNumberNEQ(v string) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldMobileNumber, v))
}

// MobileNumberIn applies the In predicate on the "mobile_number" field.
func MobileNumberIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldMobileNumber, vs...))
}

// MobileNumberNotIn applies the NotIn predicate on the "mobile_number" field.
func MobileNumberNotIn(vs ...string) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldMobileNumber, vs...))
}

// MobileNumberGT applies the GT predicate on the "mobile_number" field.
func MobileNumberGT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldMobileNumber, v))
}

// MobileNumberGTE applies the GTE predicate on the "mobile_number" field.
func MobileNumberGTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldMobileNumber, v))
}

// MobileNumberLT applies the LT predicate on the "mobile_number" field.
func MobileNumberLT(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldMobileNumber, v))
}

// MobileNumberLTE applies the LTE predicate on the "mobile_number" field.
func MobileNumberLTE(v string) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldMobileNumber, v))
}

// MobileNumberContains applies the Contains predicate on the "mobile_number" field.
func MobileNumberContains(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContains(FieldMobileNumber, v))
}

// MobileNumberHasPrefix applies the HasPrefix predicate on the "mobile_number" field.
func MobileNumberHasPrefix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasPrefix(FieldMobileNumber, v))
}

// MobileNumberHasSuffix applies the HasSuffix predicate on the "mobile_number" field.
func MobileNumberHasSuffix(v string) predicate.Customer {
	return predicate.Customer(sql.FieldHasSuffix(FieldMobileNumber, v))
}

// MobileNumberEqualFold applies the EqualFold predicate on the "mobile_number" field.
func MobileNumberEqualFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldEqualFold(FieldMobileNumber, v))
}

// MobileNumberContainsFold applies the ContainsFold predicate on the "mobile_number" field.
func MobileNumberContainsFold(v string) predicate.Customer {
	return predicate.Customer(sql.FieldContainsFold(FieldMobileNumber, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Customer {
	return predicate.Customer(sql.FieldLTE(FieldCreatedAt, v))
}

// HasBills applies the HasEdge predicate on the "bills" edge.
func HasBills() predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillsWith applies the HasEdge predicate on the "bills" edge with a given conditions (other predicates).
func HasBillsWith(preds ...predicate.Bill) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		step := newBillsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Customer) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Customer) predicate.Customer {
	return predicate.Customer(func(s *sql.Selector) {
		p(s.Not())
	})
}
