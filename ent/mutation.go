// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapi/ent/bill"
	"kapi/ent/biller_account"
	"kapi/ent/customer"
	"kapi/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBill          = "Bill"
	TypeBillerAccount = "Biller_account"
	TypeCustomer      = "Customer"
)

// BillMutation represents an operation that mutates the Bill nodes in the graph.
type BillMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	reference_2           *int
	addreference_2        *int
	transaction_id        *string
	tran_amount           *float64
	addtran_amount        *float64
	channel_code          *string
	sender_bank_code      *string
	status                *string
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	biller_account        *int
	clearedbiller_account bool
	customer              *int
	clearedcustomer       bool
	done                  bool
	oldValue              func(context.Context) (*Bill, error)
	predicates            []predicate.Bill
}

var _ ent.Mutation = (*BillMutation)(nil)

// billOption allows management of the mutation configuration using functional options.
type billOption func(*BillMutation)

// newBillMutation creates new mutation for the Bill entity.
func newBillMutation(c config, op Op, opts ...billOption) *BillMutation {
	m := &BillMutation{
		config:        c,
		op:            op,
		typ:           TypeBill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBillID sets the ID field of the mutation.
func withBillID(id int) billOption {
	return func(m *BillMutation) {
		var (
			err   error
			once  sync.Once
			value *Bill
		)
		m.oldValue = func(ctx context.Context) (*Bill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBill sets the old Bill of the mutation.
func withBill(node *Bill) billOption {
	return func(m *BillMutation) {
		m.oldValue = func(context.Context) (*Bill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bill entities.
func (m *BillMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BillMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBillerID sets the "biller_id" field.
func (m *BillMutation) SetBillerID(i int) {
	m.biller_account = &i
}

// BillerID returns the value of the "biller_id" field in the mutation.
func (m *BillMutation) BillerID() (r int, exists bool) {
	v := m.biller_account
	if v == nil {
		return
	}
	return *v, true
}

// OldBillerID returns the old "biller_id" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldBillerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillerID: %w", err)
	}
	return oldValue.BillerID, nil
}

// ClearBillerID clears the value of the "biller_id" field.
func (m *BillMutation) ClearBillerID() {
	m.biller_account = nil
	m.clearedFields[bill.FieldBillerID] = struct{}{}
}

// BillerIDCleared returns if the "biller_id" field was cleared in this mutation.
func (m *BillMutation) BillerIDCleared() bool {
	_, ok := m.clearedFields[bill.FieldBillerID]
	return ok
}

// ResetBillerID resets all changes to the "biller_id" field.
func (m *BillMutation) ResetBillerID() {
	m.biller_account = nil
	delete(m.clearedFields, bill.FieldBillerID)
}

// SetReference1 sets the "reference_1" field.
func (m *BillMutation) SetReference1(i int) {
	m.customer = &i
}

// Reference1 returns the value of the "reference_1" field in the mutation.
func (m *BillMutation) Reference1() (r int, exists bool) {
	v := m.customer
	if v == nil {
		return
	}
	return *v, true
}

// OldReference1 returns the old "reference_1" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldReference1(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReference1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReference1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReference1: %w", err)
	}
	return oldValue.Reference1, nil
}

// ClearReference1 clears the value of the "reference_1" field.
func (m *BillMutation) ClearReference1() {
	m.customer = nil
	m.clearedFields[bill.FieldReference1] = struct{}{}
}

// Reference1Cleared returns if the "reference_1" field was cleared in this mutation.
func (m *BillMutation) Reference1Cleared() bool {
	_, ok := m.clearedFields[bill.FieldReference1]
	return ok
}

// ResetReference1 resets all changes to the "reference_1" field.
func (m *BillMutation) ResetReference1() {
	m.customer = nil
	delete(m.clearedFields, bill.FieldReference1)
}

// SetReference2 sets the "reference_2" field.
func (m *BillMutation) SetReference2(i int) {
	m.reference_2 = &i
	m.addreference_2 = nil
}

// Reference2 returns the value of the "reference_2" field in the mutation.
func (m *BillMutation) Reference2() (r int, exists bool) {
	v := m.reference_2
	if v == nil {
		return
	}
	return *v, true
}

// OldReference2 returns the old "reference_2" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldReference2(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReference2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReference2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReference2: %w", err)
	}
	return oldValue.Reference2, nil
}

// AddReference2 adds i to the "reference_2" field.
func (m *BillMutation) AddReference2(i int) {
	if m.addreference_2 != nil {
		*m.addreference_2 += i
	} else {
		m.addreference_2 = &i
	}
}

// AddedReference2 returns the value that was added to the "reference_2" field in this mutation.
func (m *BillMutation) AddedReference2() (r int, exists bool) {
	v := m.addreference_2
	if v == nil {
		return
	}
	return *v, true
}

// ClearReference2 clears the value of the "reference_2" field.
func (m *BillMutation) ClearReference2() {
	m.reference_2 = nil
	m.addreference_2 = nil
	m.clearedFields[bill.FieldReference2] = struct{}{}
}

// Reference2Cleared returns if the "reference_2" field was cleared in this mutation.
func (m *BillMutation) Reference2Cleared() bool {
	_, ok := m.clearedFields[bill.FieldReference2]
	return ok
}

// ResetReference2 resets all changes to the "reference_2" field.
func (m *BillMutation) ResetReference2() {
	m.reference_2 = nil
	m.addreference_2 = nil
	delete(m.clearedFields, bill.FieldReference2)
}

// SetTransactionID sets the "transaction_id" field.
func (m *BillMutation) SetTransactionID(s string) {
	m.transaction_id = &s
}

// TransactionID returns the value of the "transaction_id" field in the mutation.
func (m *BillMutation) TransactionID() (r string, exists bool) {
	v := m.transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionID returns the old "transaction_id" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionID: %w", err)
	}
	return oldValue.TransactionID, nil
}

// ResetTransactionID resets all changes to the "transaction_id" field.
func (m *BillMutation) ResetTransactionID() {
	m.transaction_id = nil
}

// SetTranAmount sets the "tran_amount" field.
func (m *BillMutation) SetTranAmount(f float64) {
	m.tran_amount = &f
	m.addtran_amount = nil
}

// TranAmount returns the value of the "tran_amount" field in the mutation.
func (m *BillMutation) TranAmount() (r float64, exists bool) {
	v := m.tran_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTranAmount returns the old "tran_amount" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldTranAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranAmount: %w", err)
	}
	return oldValue.TranAmount, nil
}

// AddTranAmount adds f to the "tran_amount" field.
func (m *BillMutation) AddTranAmount(f float64) {
	if m.addtran_amount != nil {
		*m.addtran_amount += f
	} else {
		m.addtran_amount = &f
	}
}

// AddedTranAmount returns the value that was added to the "tran_amount" field in this mutation.
func (m *BillMutation) AddedTranAmount() (r float64, exists bool) {
	v := m.addtran_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetTranAmount resets all changes to the "tran_amount" field.
func (m *BillMutation) ResetTranAmount() {
	m.tran_amount = nil
	m.addtran_amount = nil
}

// SetChannelCode sets the "channel_code" field.
func (m *BillMutation) SetChannelCode(s string) {
	m.channel_code = &s
}

// ChannelCode returns the value of the "channel_code" field in the mutation.
func (m *BillMutation) ChannelCode() (r string, exists bool) {
	v := m.channel_code
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelCode returns the old "channel_code" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldChannelCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelCode: %w", err)
	}
	return oldValue.ChannelCode, nil
}

// ResetChannelCode resets all changes to the "channel_code" field.
func (m *BillMutation) ResetChannelCode() {
	m.channel_code = nil
}

// SetSenderBankCode sets the "sender_bank_code" field.
func (m *BillMutation) SetSenderBankCode(s string) {
	m.sender_bank_code = &s
}

// SenderBankCode returns the value of the "sender_bank_code" field in the mutation.
func (m *BillMutation) SenderBankCode() (r string, exists bool) {
	v := m.sender_bank_code
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderBankCode returns the old "sender_bank_code" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldSenderBankCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderBankCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderBankCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderBankCode: %w", err)
	}
	return oldValue.SenderBankCode, nil
}

// ResetSenderBankCode resets all changes to the "sender_bank_code" field.
func (m *BillMutation) ResetSenderBankCode() {
	m.sender_bank_code = nil
}

// SetStatus sets the "status" field.
func (m *BillMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *BillMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *BillMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BillMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BillMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BillMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BillMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BillMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Bill entity.
// If the Bill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BillMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetBillerAccountID sets the "biller_account" edge to the Biller_account entity by id.
func (m *BillMutation) SetBillerAccountID(id int) {
	m.biller_account = &id
}

// ClearBillerAccount clears the "biller_account" edge to the Biller_account entity.
func (m *BillMutation) ClearBillerAccount() {
	m.clearedbiller_account = true
}

// BillerAccountCleared reports if the "biller_account" edge to the Biller_account entity was cleared.
func (m *BillMutation) BillerAccountCleared() bool {
	return m.BillerIDCleared() || m.clearedbiller_account
}

// BillerAccountID returns the "biller_account" edge ID in the mutation.
func (m *BillMutation) BillerAccountID() (id int, exists bool) {
	if m.biller_account != nil {
		return *m.biller_account, true
	}
	return
}

// BillerAccountIDs returns the "biller_account" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BillerAccountID instead. It exists only for internal usage by the builders.
func (m *BillMutation) BillerAccountIDs() (ids []int) {
	if id := m.biller_account; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBillerAccount resets all changes to the "biller_account" edge.
func (m *BillMutation) ResetBillerAccount() {
	m.biller_account = nil
	m.clearedbiller_account = false
}

// SetCustomerID sets the "customer" edge to the Customer entity by id.
func (m *BillMutation) SetCustomerID(id int) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *BillMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *BillMutation) CustomerCleared() bool {
	return m.Reference1Cleared() || m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *BillMutation) CustomerID() (id int, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *BillMutation) CustomerIDs() (ids []int) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *BillMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// Where appends a list predicates to the BillMutation builder.
func (m *BillMutation) Where(ps ...predicate.Bill) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BillMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BillMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bill, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BillMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BillMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bill).
func (m *BillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BillMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.biller_account != nil {
		fields = append(fields, bill.FieldBillerID)
	}
	if m.customer != nil {
		fields = append(fields, bill.FieldReference1)
	}
	if m.reference_2 != nil {
		fields = append(fields, bill.FieldReference2)
	}
	if m.transaction_id != nil {
		fields = append(fields, bill.FieldTransactionID)
	}
	if m.tran_amount != nil {
		fields = append(fields, bill.FieldTranAmount)
	}
	if m.channel_code != nil {
		fields = append(fields, bill.FieldChannelCode)
	}
	if m.sender_bank_code != nil {
		fields = append(fields, bill.FieldSenderBankCode)
	}
	if m.status != nil {
		fields = append(fields, bill.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, bill.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bill.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bill.FieldBillerID:
		return m.BillerID()
	case bill.FieldReference1:
		return m.Reference1()
	case bill.FieldReference2:
		return m.Reference2()
	case bill.FieldTransactionID:
		return m.TransactionID()
	case bill.FieldTranAmount:
		return m.TranAmount()
	case bill.FieldChannelCode:
		return m.ChannelCode()
	case bill.FieldSenderBankCode:
		return m.SenderBankCode()
	case bill.FieldStatus:
		return m.Status()
	case bill.FieldCreatedAt:
		return m.CreatedAt()
	case bill.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bill.FieldBillerID:
		return m.OldBillerID(ctx)
	case bill.FieldReference1:
		return m.OldReference1(ctx)
	case bill.FieldReference2:
		return m.OldReference2(ctx)
	case bill.FieldTransactionID:
		return m.OldTransactionID(ctx)
	case bill.FieldTranAmount:
		return m.OldTranAmount(ctx)
	case bill.FieldChannelCode:
		return m.OldChannelCode(ctx)
	case bill.FieldSenderBankCode:
		return m.OldSenderBankCode(ctx)
	case bill.FieldStatus:
		return m.OldStatus(ctx)
	case bill.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bill.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Bill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bill.FieldBillerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillerID(v)
		return nil
	case bill.FieldReference1:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReference1(v)
		return nil
	case bill.FieldReference2:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReference2(v)
		return nil
	case bill.FieldTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionID(v)
		return nil
	case bill.FieldTranAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranAmount(v)
		return nil
	case bill.FieldChannelCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelCode(v)
		return nil
	case bill.FieldSenderBankCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderBankCode(v)
		return nil
	case bill.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case bill.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bill.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Bill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BillMutation) AddedFields() []string {
	var fields []string
	if m.addreference_2 != nil {
		fields = append(fields, bill.FieldReference2)
	}
	if m.addtran_amount != nil {
		fields = append(fields, bill.FieldTranAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BillMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bill.FieldReference2:
		return m.AddedReference2()
	case bill.FieldTranAmount:
		return m.AddedTranAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bill.FieldReference2:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReference2(v)
		return nil
	case bill.FieldTranAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTranAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Bill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BillMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bill.FieldBillerID) {
		fields = append(fields, bill.FieldBillerID)
	}
	if m.FieldCleared(bill.FieldReference1) {
		fields = append(fields, bill.FieldReference1)
	}
	if m.FieldCleared(bill.FieldReference2) {
		fields = append(fields, bill.FieldReference2)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BillMutation) ClearField(name string) error {
	switch name {
	case bill.FieldBillerID:
		m.ClearBillerID()
		return nil
	case bill.FieldReference1:
		m.ClearReference1()
		return nil
	case bill.FieldReference2:
		m.ClearReference2()
		return nil
	}
	return fmt.Errorf("unknown Bill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BillMutation) ResetField(name string) error {
	switch name {
	case bill.FieldBillerID:
		m.ResetBillerID()
		return nil
	case bill.FieldReference1:
		m.ResetReference1()
		return nil
	case bill.FieldReference2:
		m.ResetReference2()
		return nil
	case bill.FieldTransactionID:
		m.ResetTransactionID()
		return nil
	case bill.FieldTranAmount:
		m.ResetTranAmount()
		return nil
	case bill.FieldChannelCode:
		m.ResetChannelCode()
		return nil
	case bill.FieldSenderBankCode:
		m.ResetSenderBankCode()
		return nil
	case bill.FieldStatus:
		m.ResetStatus()
		return nil
	case bill.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bill.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Bill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BillMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.biller_account != nil {
		edges = append(edges, bill.EdgeBillerAccount)
	}
	if m.customer != nil {
		edges = append(edges, bill.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bill.EdgeBillerAccount:
		if id := m.biller_account; id != nil {
			return []ent.Value{*id}
		}
	case bill.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BillMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbiller_account {
		edges = append(edges, bill.EdgeBillerAccount)
	}
	if m.clearedcustomer {
		edges = append(edges, bill.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BillMutation) EdgeCleared(name string) bool {
	switch name {
	case bill.EdgeBillerAccount:
		return m.clearedbiller_account
	case bill.EdgeCustomer:
		return m.clearedcustomer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BillMutation) ClearEdge(name string) error {
	switch name {
	case bill.EdgeBillerAccount:
		m.ClearBillerAccount()
		return nil
	case bill.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown Bill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BillMutation) ResetEdge(name string) error {
	switch name {
	case bill.EdgeBillerAccount:
		m.ResetBillerAccount()
		return nil
	case bill.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown Bill edge %s", name)
}

// BillerAccountMutation represents an operation that mutates the Biller_account nodes in the graph.
type BillerAccountMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	service_name  *string
	clearedFields map[string]struct{}
	bills         map[int]struct{}
	removedbills  map[int]struct{}
	clearedbills  bool
	done          bool
	oldValue      func(context.Context) (*Biller_account, error)
	predicates    []predicate.Biller_account
}

var _ ent.Mutation = (*BillerAccountMutation)(nil)

// billerAccountOption allows management of the mutation configuration using functional options.
type billerAccountOption func(*BillerAccountMutation)

// newBillerAccountMutation creates new mutation for the Biller_account entity.
func newBillerAccountMutation(c config, op Op, opts ...billerAccountOption) *BillerAccountMutation {
	m := &BillerAccountMutation{
		config:        c,
		op:            op,
		typ:           TypeBillerAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBiller_accountID sets the ID field of the mutation.
func withBiller_accountID(id int) billerAccountOption {
	return func(m *BillerAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Biller_account
		)
		m.oldValue = func(ctx context.Context) (*Biller_account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Biller_account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBiller_account sets the old Biller_account of the mutation.
func withBiller_account(node *Biller_account) billerAccountOption {
	return func(m *BillerAccountMutation) {
		m.oldValue = func(context.Context) (*Biller_account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BillerAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BillerAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Biller_account entities.
func (m *BillerAccountMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BillerAccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BillerAccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Biller_account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BillerAccountMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BillerAccountMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Biller_account entity.
// If the Biller_account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillerAccountMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BillerAccountMutation) ResetName() {
	m.name = nil
}

// SetServiceName sets the "service_name" field.
func (m *BillerAccountMutation) SetServiceName(s string) {
	m.service_name = &s
}

// ServiceName returns the value of the "service_name" field in the mutation.
func (m *BillerAccountMutation) ServiceName() (r string, exists bool) {
	v := m.service_name
	if v == nil {
		return
	}
	return *v, true
}

// OldServiceName returns the old "service_name" field's value of the Biller_account entity.
// If the Biller_account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BillerAccountMutation) OldServiceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServiceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServiceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServiceName: %w", err)
	}
	return oldValue.ServiceName, nil
}

// ResetServiceName resets all changes to the "service_name" field.
func (m *BillerAccountMutation) ResetServiceName() {
	m.service_name = nil
}

// AddBillIDs adds the "bills" edge to the Bill entity by ids.
func (m *BillerAccountMutation) AddBillIDs(ids ...int) {
	if m.bills == nil {
		m.bills = make(map[int]struct{})
	}
	for i := range ids {
		m.bills[ids[i]] = struct{}{}
	}
}

// ClearBills clears the "bills" edge to the Bill entity.
func (m *BillerAccountMutation) ClearBills() {
	m.clearedbills = true
}

// BillsCleared reports if the "bills" edge to the Bill entity was cleared.
func (m *BillerAccountMutation) BillsCleared() bool {
	return m.clearedbills
}

// RemoveBillIDs removes the "bills" edge to the Bill entity by IDs.
func (m *BillerAccountMutation) RemoveBillIDs(ids ...int) {
	if m.removedbills == nil {
		m.removedbills = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.bills, ids[i])
		m.removedbills[ids[i]] = struct{}{}
	}
}

// RemovedBills returns the removed IDs of the "bills" edge to the Bill entity.
func (m *BillerAccountMutation) RemovedBillsIDs() (ids []int) {
	for id := range m.removedbills {
		ids = append(ids, id)
	}
	return
}

// BillsIDs returns the "bills" edge IDs in the mutation.
func (m *BillerAccountMutation) BillsIDs() (ids []int) {
	for id := range m.bills {
		ids = append(ids, id)
	}
	return
}

// ResetBills resets all changes to the "bills" edge.
func (m *BillerAccountMutation) ResetBills() {
	m.bills = nil
	m.clearedbills = false
	m.removedbills = nil
}

// Where appends a list predicates to the BillerAccountMutation builder.
func (m *BillerAccountMutation) Where(ps ...predicate.Biller_account) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BillerAccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BillerAccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Biller_account, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BillerAccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BillerAccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Biller_account).
func (m *BillerAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BillerAccountMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, biller_account.FieldName)
	}
	if m.service_name != nil {
		fields = append(fields, biller_account.FieldServiceName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BillerAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case biller_account.FieldName:
		return m.Name()
	case biller_account.FieldServiceName:
		return m.ServiceName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BillerAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case biller_account.FieldName:
		return m.OldName(ctx)
	case biller_account.FieldServiceName:
		return m.OldServiceName(ctx)
	}
	return nil, fmt.Errorf("unknown Biller_account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillerAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case biller_account.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case biller_account.FieldServiceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServiceName(v)
		return nil
	}
	return fmt.Errorf("unknown Biller_account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BillerAccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BillerAccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BillerAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Biller_account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BillerAccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BillerAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BillerAccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Biller_account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BillerAccountMutation) ResetField(name string) error {
	switch name {
	case biller_account.FieldName:
		m.ResetName()
		return nil
	case biller_account.FieldServiceName:
		m.ResetServiceName()
		return nil
	}
	return fmt.Errorf("unknown Biller_account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BillerAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.bills != nil {
		edges = append(edges, biller_account.EdgeBills)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BillerAccountMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case biller_account.EdgeBills:
		ids := make([]ent.Value, 0, len(m.bills))
		for id := range m.bills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BillerAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbills != nil {
		edges = append(edges, biller_account.EdgeBills)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BillerAccountMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case biller_account.EdgeBills:
		ids := make([]ent.Value, 0, len(m.removedbills))
		for id := range m.removedbills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BillerAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbills {
		edges = append(edges, biller_account.EdgeBills)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BillerAccountMutation) EdgeCleared(name string) bool {
	switch name {
	case biller_account.EdgeBills:
		return m.clearedbills
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BillerAccountMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Biller_account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BillerAccountMutation) ResetEdge(name string) error {
	switch name {
	case biller_account.EdgeBills:
		m.ResetBills()
		return nil
	}
	return fmt.Errorf("unknown Biller_account edge %s", name)
}

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	first_name    *string
	last_name     *string
	title_name    *string
	mobile_number *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	bills         map[int]struct{}
	removedbills  map[int]struct{}
	clearedbills  bool
	done          bool
	oldValue      func(context.Context) (*Customer, error)
	predicates    []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id int) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *CustomerMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *CustomerMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *CustomerMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *CustomerMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *CustomerMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *CustomerMutation) ResetLastName() {
	m.last_name = nil
}

// SetTitleName sets the "title_name" field.
func (m *CustomerMutation) SetTitleName(s string) {
	m.title_name = &s
}

// TitleName returns the value of the "title_name" field in the mutation.
func (m *CustomerMutation) TitleName() (r string, exists bool) {
	v := m.title_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleName returns the old "title_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldTitleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleName: %w", err)
	}
	return oldValue.TitleName, nil
}

// ResetTitleName resets all changes to the "title_name" field.
func (m *CustomerMutation) ResetTitleName() {
	m.title_name = nil
}

// SetMobileNumber sets the "mobile_number" field.
func (m *CustomerMutation) SetMobileNumber(s string) {
	m.mobile_number = &s
}

// MobileNumber returns the value of the "mobile_number" field in the mutation.
func (m *CustomerMutation) MobileNumber() (r string, exists bool) {
	v := m.mobile_number
	if v == nil {
		return
	}
	return *v, true
}

// OldMobileNumber returns the old "mobile_number" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldMobileNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobileNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobileNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobileNumber: %w", err)
	}
	return oldValue.MobileNumber, nil
}

// ResetMobileNumber resets all changes to the "mobile_number" field.
func (m *CustomerMutation) ResetMobileNumber() {
	m.mobile_number = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CustomerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CustomerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CustomerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddBillIDs adds the "bills" edge to the Bill entity by ids.
func (m *CustomerMutation) AddBillIDs(ids ...int) {
	if m.bills == nil {
		m.bills = make(map[int]struct{})
	}
	for i := range ids {
		m.bills[ids[i]] = struct{}{}
	}
}

// ClearBills clears the "bills" edge to the Bill entity.
func (m *CustomerMutation) ClearBills() {
	m.clearedbills = true
}

// BillsCleared reports if the "bills" edge to the Bill entity was cleared.
func (m *CustomerMutation) BillsCleared() bool {
	return m.clearedbills
}

// RemoveBillIDs removes the "bills" edge to the Bill entity by IDs.
func (m *CustomerMutation) RemoveBillIDs(ids ...int) {
	if m.removedbills == nil {
		m.removedbills = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.bills, ids[i])
		m.removedbills[ids[i]] = struct{}{}
	}
}

// RemovedBills returns the removed IDs of the "bills" edge to the Bill entity.
func (m *CustomerMutation) RemovedBillsIDs() (ids []int) {
	for id := range m.removedbills {
		ids = append(ids, id)
	}
	return
}

// BillsIDs returns the "bills" edge IDs in the mutation.
func (m *CustomerMutation) BillsIDs() (ids []int) {
	for id := range m.bills {
		ids = append(ids, id)
	}
	return
}

// ResetBills resets all changes to the "bills" edge.
func (m *CustomerMutation) ResetBills() {
	m.bills = nil
	m.clearedbills = false
	m.removedbills = nil
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Customer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.first_name != nil {
		fields = append(fields, customer.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, customer.FieldLastName)
	}
	if m.title_name != nil {
		fields = append(fields, customer.FieldTitleName)
	}
	if m.mobile_number != nil {
		fields = append(fields, customer.FieldMobileNumber)
	}
	if m.created_at != nil {
		fields = append(fields, customer.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldFirstName:
		return m.FirstName()
	case customer.FieldLastName:
		return m.LastName()
	case customer.FieldTitleName:
		return m.TitleName()
	case customer.FieldMobileNumber:
		return m.MobileNumber()
	case customer.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldFirstName:
		return m.OldFirstName(ctx)
	case customer.FieldLastName:
		return m.OldLastName(ctx)
	case customer.FieldTitleName:
		return m.OldTitleName(ctx)
	case customer.FieldMobileNumber:
		return m.OldMobileNumber(ctx)
	case customer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case customer.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case customer.FieldTitleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleName(v)
		return nil
	case customer.FieldMobileNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobileNumber(v)
		return nil
	case customer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldFirstName:
		m.ResetFirstName()
		return nil
	case customer.FieldLastName:
		m.ResetLastName()
		return nil
	case customer.FieldTitleName:
		m.ResetTitleName()
		return nil
	case customer.FieldMobileNumber:
		m.ResetMobileNumber()
		return nil
	case customer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.bills != nil {
		edges = append(edges, customer.EdgeBills)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeBills:
		ids := make([]ent.Value, 0, len(m.bills))
		for id := range m.bills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedbills != nil {
		edges = append(edges, customer.EdgeBills)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeBills:
		ids := make([]ent.Value, 0, len(m.removedbills))
		for id := range m.removedbills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbills {
		edges = append(edges, customer.EdgeBills)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeBills:
		return m.clearedbills
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeBills:
		m.ResetBills()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}
