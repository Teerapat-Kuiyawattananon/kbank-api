// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapi/ent/bill"
	"kapi/ent/biller_account"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillerAccountCreate is the builder for creating a Biller_account entity.
type BillerAccountCreate struct {
	config
	mutation *BillerAccountMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bac *BillerAccountCreate) SetName(s string) *BillerAccountCreate {
	bac.mutation.SetName(s)
	return bac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bac *BillerAccountCreate) SetNillableName(s *string) *BillerAccountCreate {
	if s != nil {
		bac.SetName(*s)
	}
	return bac
}

// SetServiceName sets the "service_name" field.
func (bac *BillerAccountCreate) SetServiceName(s string) *BillerAccountCreate {
	bac.mutation.SetServiceName(s)
	return bac
}

// SetNillableServiceName sets the "service_name" field if the given value is not nil.
func (bac *BillerAccountCreate) SetNillableServiceName(s *string) *BillerAccountCreate {
	if s != nil {
		bac.SetServiceName(*s)
	}
	return bac
}

// SetID sets the "id" field.
func (bac *BillerAccountCreate) SetID(i int) *BillerAccountCreate {
	bac.mutation.SetID(i)
	return bac
}

// AddBillIDs adds the "bills" edge to the Bill entity by IDs.
func (bac *BillerAccountCreate) AddBillIDs(ids ...int) *BillerAccountCreate {
	bac.mutation.AddBillIDs(ids...)
	return bac
}

// AddBills adds the "bills" edges to the Bill entity.
func (bac *BillerAccountCreate) AddBills(b ...*Bill) *BillerAccountCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bac.AddBillIDs(ids...)
}

// Mutation returns the BillerAccountMutation object of the builder.
func (bac *BillerAccountCreate) Mutation() *BillerAccountMutation {
	return bac.mutation
}

// Save creates the Biller_account in the database.
func (bac *BillerAccountCreate) Save(ctx context.Context) (*Biller_account, error) {
	bac.defaults()
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BillerAccountCreate) SaveX(ctx context.Context) *Biller_account {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BillerAccountCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BillerAccountCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BillerAccountCreate) defaults() {
	if _, ok := bac.mutation.Name(); !ok {
		v := biller_account.DefaultName
		bac.mutation.SetName(v)
	}
	if _, ok := bac.mutation.ServiceName(); !ok {
		v := biller_account.DefaultServiceName
		bac.mutation.SetServiceName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BillerAccountCreate) check() error {
	if _, ok := bac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Biller_account.name"`)}
	}
	if _, ok := bac.mutation.ServiceName(); !ok {
		return &ValidationError{Name: "service_name", err: errors.New(`ent: missing required field "Biller_account.service_name"`)}
	}
	return nil
}

func (bac *BillerAccountCreate) sqlSave(ctx context.Context) (*Biller_account, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BillerAccountCreate) createSpec() (*Biller_account, *sqlgraph.CreateSpec) {
	var (
		_node = &Biller_account{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(biller_account.Table, sqlgraph.NewFieldSpec(biller_account.FieldID, field.TypeInt))
	)
	if id, ok := bac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bac.mutation.Name(); ok {
		_spec.SetField(biller_account.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bac.mutation.ServiceName(); ok {
		_spec.SetField(biller_account.FieldServiceName, field.TypeString, value)
		_node.ServiceName = value
	}
	if nodes := bac.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   biller_account.BillsTable,
			Columns: []string{biller_account.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BillerAccountCreateBulk is the builder for creating many Biller_account entities in bulk.
type BillerAccountCreateBulk struct {
	config
	builders []*BillerAccountCreate
}

// Save creates the Biller_account entities in the database.
func (bacb *BillerAccountCreateBulk) Save(ctx context.Context) ([]*Biller_account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*Biller_account, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillerAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BillerAccountCreateBulk) SaveX(ctx context.Context) []*Biller_account {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BillerAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BillerAccountCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}
