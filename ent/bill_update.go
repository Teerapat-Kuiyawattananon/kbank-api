// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kapi/ent/bill"
	"kapi/ent/biller_account"
	"kapi/ent/customer"
	"kapi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// Where appends a list predicates to the BillUpdate builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBillerID sets the "biller_id" field.
func (bu *BillUpdate) SetBillerID(i int) *BillUpdate {
	bu.mutation.SetBillerID(i)
	return bu
}

// SetNillableBillerID sets the "biller_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableBillerID(i *int) *BillUpdate {
	if i != nil {
		bu.SetBillerID(*i)
	}
	return bu
}

// ClearBillerID clears the value of the "biller_id" field.
func (bu *BillUpdate) ClearBillerID() *BillUpdate {
	bu.mutation.ClearBillerID()
	return bu
}

// SetReference1 sets the "reference_1" field.
func (bu *BillUpdate) SetReference1(i int) *BillUpdate {
	bu.mutation.SetReference1(i)
	return bu
}

// SetNillableReference1 sets the "reference_1" field if the given value is not nil.
func (bu *BillUpdate) SetNillableReference1(i *int) *BillUpdate {
	if i != nil {
		bu.SetReference1(*i)
	}
	return bu
}

// ClearReference1 clears the value of the "reference_1" field.
func (bu *BillUpdate) ClearReference1() *BillUpdate {
	bu.mutation.ClearReference1()
	return bu
}

// SetReference2 sets the "reference_2" field.
func (bu *BillUpdate) SetReference2(i int) *BillUpdate {
	bu.mutation.ResetReference2()
	bu.mutation.SetReference2(i)
	return bu
}

// SetNillableReference2 sets the "reference_2" field if the given value is not nil.
func (bu *BillUpdate) SetNillableReference2(i *int) *BillUpdate {
	if i != nil {
		bu.SetReference2(*i)
	}
	return bu
}

// AddReference2 adds i to the "reference_2" field.
func (bu *BillUpdate) AddReference2(i int) *BillUpdate {
	bu.mutation.AddReference2(i)
	return bu
}

// ClearReference2 clears the value of the "reference_2" field.
func (bu *BillUpdate) ClearReference2() *BillUpdate {
	bu.mutation.ClearReference2()
	return bu
}

// SetTransactionID sets the "transaction_id" field.
func (bu *BillUpdate) SetTransactionID(s string) *BillUpdate {
	bu.mutation.SetTransactionID(s)
	return bu
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (bu *BillUpdate) SetNillableTransactionID(s *string) *BillUpdate {
	if s != nil {
		bu.SetTransactionID(*s)
	}
	return bu
}

// SetTranAmount sets the "tran_amount" field.
func (bu *BillUpdate) SetTranAmount(f float64) *BillUpdate {
	bu.mutation.ResetTranAmount()
	bu.mutation.SetTranAmount(f)
	return bu
}

// SetNillableTranAmount sets the "tran_amount" field if the given value is not nil.
func (bu *BillUpdate) SetNillableTranAmount(f *float64) *BillUpdate {
	if f != nil {
		bu.SetTranAmount(*f)
	}
	return bu
}

// AddTranAmount adds f to the "tran_amount" field.
func (bu *BillUpdate) AddTranAmount(f float64) *BillUpdate {
	bu.mutation.AddTranAmount(f)
	return bu
}

// SetChannelCode sets the "channel_code" field.
func (bu *BillUpdate) SetChannelCode(s string) *BillUpdate {
	bu.mutation.SetChannelCode(s)
	return bu
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (bu *BillUpdate) SetNillableChannelCode(s *string) *BillUpdate {
	if s != nil {
		bu.SetChannelCode(*s)
	}
	return bu
}

// SetSenderBankCode sets the "sender_bank_code" field.
func (bu *BillUpdate) SetSenderBankCode(s string) *BillUpdate {
	bu.mutation.SetSenderBankCode(s)
	return bu
}

// SetNillableSenderBankCode sets the "sender_bank_code" field if the given value is not nil.
func (bu *BillUpdate) SetNillableSenderBankCode(s *string) *BillUpdate {
	if s != nil {
		bu.SetSenderBankCode(*s)
	}
	return bu
}

// SetStatus sets the "status" field.
func (bu *BillUpdate) SetStatus(s string) *BillUpdate {
	bu.mutation.SetStatus(s)
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BillUpdate) SetCreatedAt(t time.Time) *BillUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BillUpdate) SetNillableCreatedAt(t *time.Time) *BillUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BillUpdate) SetUpdatedAt(t time.Time) *BillUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetBillerAccountID sets the "biller_account" edge to the Biller_account entity by ID.
func (bu *BillUpdate) SetBillerAccountID(id int) *BillUpdate {
	bu.mutation.SetBillerAccountID(id)
	return bu
}

// SetNillableBillerAccountID sets the "biller_account" edge to the Biller_account entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableBillerAccountID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetBillerAccountID(*id)
	}
	return bu
}

// SetBillerAccount sets the "biller_account" edge to the Biller_account entity.
func (bu *BillUpdate) SetBillerAccount(b *Biller_account) *BillUpdate {
	return bu.SetBillerAccountID(b.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (bu *BillUpdate) SetCustomerID(id int) *BillUpdate {
	bu.mutation.SetCustomerID(id)
	return bu
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (bu *BillUpdate) SetNillableCustomerID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetCustomerID(*id)
	}
	return bu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (bu *BillUpdate) SetCustomer(c *Customer) *BillUpdate {
	return bu.SetCustomerID(c.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearBillerAccount clears the "biller_account" edge to the Biller_account entity.
func (bu *BillUpdate) ClearBillerAccount() *BillUpdate {
	bu.mutation.ClearBillerAccount()
	return bu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (bu *BillUpdate) ClearCustomer() *BillUpdate {
	bu.mutation.ClearCustomer()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BillUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := bill.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BillUpdate) check() error {
	if v, ok := bu.mutation.Status(); ok {
		if err := bill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bill.status": %w`, err)}
		}
	}
	return nil
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Reference2(); ok {
		_spec.SetField(bill.FieldReference2, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedReference2(); ok {
		_spec.AddField(bill.FieldReference2, field.TypeInt, value)
	}
	if bu.mutation.Reference2Cleared() {
		_spec.ClearField(bill.FieldReference2, field.TypeInt)
	}
	if value, ok := bu.mutation.TransactionID(); ok {
		_spec.SetField(bill.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := bu.mutation.TranAmount(); ok {
		_spec.SetField(bill.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedTranAmount(); ok {
		_spec.AddField(bill.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.ChannelCode(); ok {
		_spec.SetField(bill.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := bu.mutation.SenderBankCode(); ok {
		_spec.SetField(bill.FieldSenderBankCode, field.TypeString, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bill.FieldStatus, field.TypeString, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(bill.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.BillerAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillerAccountTable,
			Columns: []string{bill.BillerAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(biller_account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BillerAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillerAccountTable,
			Columns: []string{bill.BillerAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(biller_account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillMutation
}

// SetBillerID sets the "biller_id" field.
func (buo *BillUpdateOne) SetBillerID(i int) *BillUpdateOne {
	buo.mutation.SetBillerID(i)
	return buo
}

// SetNillableBillerID sets the "biller_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableBillerID(i *int) *BillUpdateOne {
	if i != nil {
		buo.SetBillerID(*i)
	}
	return buo
}

// ClearBillerID clears the value of the "biller_id" field.
func (buo *BillUpdateOne) ClearBillerID() *BillUpdateOne {
	buo.mutation.ClearBillerID()
	return buo
}

// SetReference1 sets the "reference_1" field.
func (buo *BillUpdateOne) SetReference1(i int) *BillUpdateOne {
	buo.mutation.SetReference1(i)
	return buo
}

// SetNillableReference1 sets the "reference_1" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableReference1(i *int) *BillUpdateOne {
	if i != nil {
		buo.SetReference1(*i)
	}
	return buo
}

// ClearReference1 clears the value of the "reference_1" field.
func (buo *BillUpdateOne) ClearReference1() *BillUpdateOne {
	buo.mutation.ClearReference1()
	return buo
}

// SetReference2 sets the "reference_2" field.
func (buo *BillUpdateOne) SetReference2(i int) *BillUpdateOne {
	buo.mutation.ResetReference2()
	buo.mutation.SetReference2(i)
	return buo
}

// SetNillableReference2 sets the "reference_2" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableReference2(i *int) *BillUpdateOne {
	if i != nil {
		buo.SetReference2(*i)
	}
	return buo
}

// AddReference2 adds i to the "reference_2" field.
func (buo *BillUpdateOne) AddReference2(i int) *BillUpdateOne {
	buo.mutation.AddReference2(i)
	return buo
}

// ClearReference2 clears the value of the "reference_2" field.
func (buo *BillUpdateOne) ClearReference2() *BillUpdateOne {
	buo.mutation.ClearReference2()
	return buo
}

// SetTransactionID sets the "transaction_id" field.
func (buo *BillUpdateOne) SetTransactionID(s string) *BillUpdateOne {
	buo.mutation.SetTransactionID(s)
	return buo
}

// SetNillableTransactionID sets the "transaction_id" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableTransactionID(s *string) *BillUpdateOne {
	if s != nil {
		buo.SetTransactionID(*s)
	}
	return buo
}

// SetTranAmount sets the "tran_amount" field.
func (buo *BillUpdateOne) SetTranAmount(f float64) *BillUpdateOne {
	buo.mutation.ResetTranAmount()
	buo.mutation.SetTranAmount(f)
	return buo
}

// SetNillableTranAmount sets the "tran_amount" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableTranAmount(f *float64) *BillUpdateOne {
	if f != nil {
		buo.SetTranAmount(*f)
	}
	return buo
}

// AddTranAmount adds f to the "tran_amount" field.
func (buo *BillUpdateOne) AddTranAmount(f float64) *BillUpdateOne {
	buo.mutation.AddTranAmount(f)
	return buo
}

// SetChannelCode sets the "channel_code" field.
func (buo *BillUpdateOne) SetChannelCode(s string) *BillUpdateOne {
	buo.mutation.SetChannelCode(s)
	return buo
}

// SetNillableChannelCode sets the "channel_code" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableChannelCode(s *string) *BillUpdateOne {
	if s != nil {
		buo.SetChannelCode(*s)
	}
	return buo
}

// SetSenderBankCode sets the "sender_bank_code" field.
func (buo *BillUpdateOne) SetSenderBankCode(s string) *BillUpdateOne {
	buo.mutation.SetSenderBankCode(s)
	return buo
}

// SetNillableSenderBankCode sets the "sender_bank_code" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableSenderBankCode(s *string) *BillUpdateOne {
	if s != nil {
		buo.SetSenderBankCode(*s)
	}
	return buo
}

// SetStatus sets the "status" field.
func (buo *BillUpdateOne) SetStatus(s string) *BillUpdateOne {
	buo.mutation.SetStatus(s)
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BillUpdateOne) SetCreatedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCreatedAt(t *time.Time) *BillUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BillUpdateOne) SetUpdatedAt(t time.Time) *BillUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetBillerAccountID sets the "biller_account" edge to the Biller_account entity by ID.
func (buo *BillUpdateOne) SetBillerAccountID(id int) *BillUpdateOne {
	buo.mutation.SetBillerAccountID(id)
	return buo
}

// SetNillableBillerAccountID sets the "biller_account" edge to the Biller_account entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableBillerAccountID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetBillerAccountID(*id)
	}
	return buo
}

// SetBillerAccount sets the "biller_account" edge to the Biller_account entity.
func (buo *BillUpdateOne) SetBillerAccount(b *Biller_account) *BillUpdateOne {
	return buo.SetBillerAccountID(b.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (buo *BillUpdateOne) SetCustomerID(id int) *BillUpdateOne {
	buo.mutation.SetCustomerID(id)
	return buo
}

// SetNillableCustomerID sets the "customer" edge to the Customer entity by ID if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCustomerID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetCustomerID(*id)
	}
	return buo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (buo *BillUpdateOne) SetCustomer(c *Customer) *BillUpdateOne {
	return buo.SetCustomerID(c.ID)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearBillerAccount clears the "biller_account" edge to the Biller_account entity.
func (buo *BillUpdateOne) ClearBillerAccount() *BillUpdateOne {
	buo.mutation.ClearBillerAccount()
	return buo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (buo *BillUpdateOne) ClearCustomer() *BillUpdateOne {
	buo.mutation.ClearCustomer()
	return buo
}

// Where appends a list predicates to the BillUpdate builder.
func (buo *BillUpdateOne) Where(ps ...predicate.Bill) *BillUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BillUpdateOne) Select(field string, fields ...string) *BillUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bill entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BillUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := bill.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BillUpdateOne) check() error {
	if v, ok := buo.mutation.Status(); ok {
		if err := bill.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bill.status": %w`, err)}
		}
	}
	return nil
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (_node *Bill, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bill.Table, bill.Columns, sqlgraph.NewFieldSpec(bill.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bill.FieldID)
		for _, f := range fields {
			if !bill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Reference2(); ok {
		_spec.SetField(bill.FieldReference2, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedReference2(); ok {
		_spec.AddField(bill.FieldReference2, field.TypeInt, value)
	}
	if buo.mutation.Reference2Cleared() {
		_spec.ClearField(bill.FieldReference2, field.TypeInt)
	}
	if value, ok := buo.mutation.TransactionID(); ok {
		_spec.SetField(bill.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := buo.mutation.TranAmount(); ok {
		_spec.SetField(bill.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedTranAmount(); ok {
		_spec.AddField(bill.FieldTranAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.ChannelCode(); ok {
		_spec.SetField(bill.FieldChannelCode, field.TypeString, value)
	}
	if value, ok := buo.mutation.SenderBankCode(); ok {
		_spec.SetField(bill.FieldSenderBankCode, field.TypeString, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bill.FieldStatus, field.TypeString, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(bill.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bill.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.BillerAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillerAccountTable,
			Columns: []string{bill.BillerAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(biller_account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BillerAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.BillerAccountTable,
			Columns: []string{bill.BillerAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(biller_account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bill{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
