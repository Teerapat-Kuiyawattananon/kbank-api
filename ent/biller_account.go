// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kapi/ent/biller_account"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Biller_account is the model entity for the Biller_account schema.
type Biller_account struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ServiceName holds the value of the "service_name" field.
	ServiceName string `json:"service_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Biller_accountQuery when eager-loading is set.
	Edges        Biller_accountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Biller_accountEdges holds the relations/edges for other nodes in the graph.
type Biller_accountEdges struct {
	// Bills holds the value of the bills edge.
	Bills []*Bill `json:"bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e Biller_accountEdges) BillsOrErr() ([]*Bill, error) {
	if e.loadedTypes[0] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Biller_account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case biller_account.FieldID:
			values[i] = new(sql.NullInt64)
		case biller_account.FieldName, biller_account.FieldServiceName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Biller_account fields.
func (ba *Biller_account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case biller_account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = int(value.Int64)
		case biller_account.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ba.Name = value.String
			}
		case biller_account.FieldServiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service_name", values[i])
			} else if value.Valid {
				ba.ServiceName = value.String
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Biller_account.
// This includes values selected through modifiers, order, etc.
func (ba *Biller_account) Value(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// QueryBills queries the "bills" edge of the Biller_account entity.
func (ba *Biller_account) QueryBills() *BillQuery {
	return NewBillerAccountClient(ba.config).QueryBills(ba)
}

// Update returns a builder for updating this Biller_account.
// Note that you need to call Biller_account.Unwrap() before calling this method if this Biller_account
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *Biller_account) Update() *BillerAccountUpdateOne {
	return NewBillerAccountClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the Biller_account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *Biller_account) Unwrap() *Biller_account {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: Biller_account is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *Biller_account) String() string {
	var builder strings.Builder
	builder.WriteString("Biller_account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("name=")
	builder.WriteString(ba.Name)
	builder.WriteString(", ")
	builder.WriteString("service_name=")
	builder.WriteString(ba.ServiceName)
	builder.WriteByte(')')
	return builder.String()
}

// Biller_accounts is a parsable slice of Biller_account.
type Biller_accounts []*Biller_account
